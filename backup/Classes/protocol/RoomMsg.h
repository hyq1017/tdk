// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomMsg.proto

#ifndef PROTOBUF_RoomMsg_2eproto__INCLUDED
#define PROTOBUF_RoomMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoomMsg_2eproto();
void protobuf_AssignDesc_RoomMsg_2eproto();
void protobuf_ShutdownFile_RoomMsg_2eproto();

class CreateRoomReq;
class CreateRoomRsp;
class InRoomReq;
class InRoomRsp;
class OutRoomReq;
class OutRoomRsp;
class RoomInfo;

// ===================================================================

class CreateRoomReq : public ::google::protobuf::Message {
 public:
  CreateRoomReq();
  virtual ~CreateRoomReq();

  CreateRoomReq(const CreateRoomReq& from);

  inline CreateRoomReq& operator=(const CreateRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoomReq& default_instance();

  void Swap(CreateRoomReq* other);

  // implements Message ----------------------------------------------

  CreateRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoomReq& from);
  void MergeFrom(const CreateRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_type = 1;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 1;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // required int32 member_cnt = 2;
  inline bool has_member_cnt() const;
  inline void clear_member_cnt();
  static const int kMemberCntFieldNumber = 2;
  inline ::google::protobuf::int32 member_cnt() const;
  inline void set_member_cnt(::google::protobuf::int32 value);

  // optional string opt2 = 3;
  inline bool has_opt2() const;
  inline void clear_opt2();
  static const int kOpt2FieldNumber = 3;
  inline const ::std::string& opt2() const;
  inline void set_opt2(const ::std::string& value);
  inline void set_opt2(const char* value);
  inline void set_opt2(const char* value, size_t size);
  inline ::std::string* mutable_opt2();
  inline ::std::string* release_opt2();
  inline void set_allocated_opt2(::std::string* opt2);

  // @@protoc_insertion_point(class_scope:CreateRoomReq)
 private:
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_member_cnt();
  inline void clear_has_member_cnt();
  inline void set_has_opt2();
  inline void clear_has_opt2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_type_;
  ::google::protobuf::int32 member_cnt_;
  ::std::string* opt2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static CreateRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoomRsp : public ::google::protobuf::Message {
 public:
  CreateRoomRsp();
  virtual ~CreateRoomRsp();

  CreateRoomRsp(const CreateRoomRsp& from);

  inline CreateRoomRsp& operator=(const CreateRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoomRsp& default_instance();

  void Swap(CreateRoomRsp* other);

  // implements Message ----------------------------------------------

  CreateRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoomRsp& from);
  void MergeFrom(const CreateRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string fail_string = 3;
  inline bool has_fail_string() const;
  inline void clear_fail_string();
  static const int kFailStringFieldNumber = 3;
  inline const ::std::string& fail_string() const;
  inline void set_fail_string(const ::std::string& value);
  inline void set_fail_string(const char* value);
  inline void set_fail_string(const char* value, size_t size);
  inline ::std::string* mutable_fail_string();
  inline ::std::string* release_fail_string();
  inline void set_allocated_fail_string(::std::string* fail_string);

  // @@protoc_insertion_point(class_scope:CreateRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_fail_string();
  inline void clear_has_fail_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 room_id_;
  ::std::string* fail_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static CreateRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class InRoomReq : public ::google::protobuf::Message {
 public:
  InRoomReq();
  virtual ~InRoomReq();

  InRoomReq(const InRoomReq& from);

  inline InRoomReq& operator=(const InRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InRoomReq& default_instance();

  void Swap(InRoomReq* other);

  // implements Message ----------------------------------------------

  InRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InRoomReq& from);
  void MergeFrom(const InRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string opt1 = 2;
  inline bool has_opt1() const;
  inline void clear_opt1();
  static const int kOpt1FieldNumber = 2;
  inline const ::std::string& opt1() const;
  inline void set_opt1(const ::std::string& value);
  inline void set_opt1(const char* value);
  inline void set_opt1(const char* value, size_t size);
  inline ::std::string* mutable_opt1();
  inline ::std::string* release_opt1();
  inline void set_allocated_opt1(::std::string* opt1);

  // @@protoc_insertion_point(class_scope:InRoomReq)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_opt1();
  inline void clear_has_opt1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* opt1_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static InRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class InRoomRsp : public ::google::protobuf::Message {
 public:
  InRoomRsp();
  virtual ~InRoomRsp();

  InRoomRsp(const InRoomRsp& from);

  inline InRoomRsp& operator=(const InRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InRoomRsp& default_instance();

  void Swap(InRoomRsp* other);

  // implements Message ----------------------------------------------

  InRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InRoomRsp& from);
  void MergeFrom(const InRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string fail_string = 3;
  inline bool has_fail_string() const;
  inline void clear_fail_string();
  static const int kFailStringFieldNumber = 3;
  inline const ::std::string& fail_string() const;
  inline void set_fail_string(const ::std::string& value);
  inline void set_fail_string(const char* value);
  inline void set_fail_string(const char* value, size_t size);
  inline ::std::string* mutable_fail_string();
  inline ::std::string* release_fail_string();
  inline void set_allocated_fail_string(::std::string* fail_string);

  // @@protoc_insertion_point(class_scope:InRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_fail_string();
  inline void clear_has_fail_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 room_id_;
  ::std::string* fail_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static InRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class OutRoomReq : public ::google::protobuf::Message {
 public:
  OutRoomReq();
  virtual ~OutRoomReq();

  OutRoomReq(const OutRoomReq& from);

  inline OutRoomReq& operator=(const OutRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutRoomReq& default_instance();

  void Swap(OutRoomReq* other);

  // implements Message ----------------------------------------------

  OutRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutRoomReq& from);
  void MergeFrom(const OutRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string opt1 = 2;
  inline bool has_opt1() const;
  inline void clear_opt1();
  static const int kOpt1FieldNumber = 2;
  inline const ::std::string& opt1() const;
  inline void set_opt1(const ::std::string& value);
  inline void set_opt1(const char* value);
  inline void set_opt1(const char* value, size_t size);
  inline ::std::string* mutable_opt1();
  inline ::std::string* release_opt1();
  inline void set_allocated_opt1(::std::string* opt1);

  // @@protoc_insertion_point(class_scope:OutRoomReq)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_opt1();
  inline void clear_has_opt1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* opt1_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static OutRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class OutRoomRsp : public ::google::protobuf::Message {
 public:
  OutRoomRsp();
  virtual ~OutRoomRsp();

  OutRoomRsp(const OutRoomRsp& from);

  inline OutRoomRsp& operator=(const OutRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutRoomRsp& default_instance();

  void Swap(OutRoomRsp* other);

  // implements Message ----------------------------------------------

  OutRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutRoomRsp& from);
  void MergeFrom(const OutRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string fail_string = 3;
  inline bool has_fail_string() const;
  inline void clear_fail_string();
  static const int kFailStringFieldNumber = 3;
  inline const ::std::string& fail_string() const;
  inline void set_fail_string(const ::std::string& value);
  inline void set_fail_string(const char* value);
  inline void set_fail_string(const char* value, size_t size);
  inline ::std::string* mutable_fail_string();
  inline ::std::string* release_fail_string();
  inline void set_allocated_fail_string(::std::string* fail_string);

  // @@protoc_insertion_point(class_scope:OutRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_fail_string();
  inline void clear_has_fail_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 room_id_;
  ::std::string* fail_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static OutRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class RoomInfo : public ::google::protobuf::Message {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();

  void Swap(RoomInfo* other);

  // implements Message ----------------------------------------------

  RoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string opt1 = 2;
  inline bool has_opt1() const;
  inline void clear_opt1();
  static const int kOpt1FieldNumber = 2;
  inline const ::std::string& opt1() const;
  inline void set_opt1(const ::std::string& value);
  inline void set_opt1(const char* value);
  inline void set_opt1(const char* value, size_t size);
  inline ::std::string* mutable_opt1();
  inline ::std::string* release_opt1();
  inline void set_allocated_opt1(::std::string* opt1);

  // optional string opt2 = 3;
  inline bool has_opt2() const;
  inline void clear_opt2();
  static const int kOpt2FieldNumber = 3;
  inline const ::std::string& opt2() const;
  inline void set_opt2(const ::std::string& value);
  inline void set_opt2(const char* value);
  inline void set_opt2(const char* value, size_t size);
  inline ::std::string* mutable_opt2();
  inline ::std::string* release_opt2();
  inline void set_allocated_opt2(::std::string* opt2);

  // @@protoc_insertion_point(class_scope:RoomInfo)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_opt1();
  inline void clear_has_opt1();
  inline void set_has_opt2();
  inline void clear_has_opt2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* opt1_;
  ::std::string* opt2_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomMsg_2eproto();
  friend void protobuf_AssignDesc_RoomMsg_2eproto();
  friend void protobuf_ShutdownFile_RoomMsg_2eproto();

  void InitAsDefaultInstance();
  static RoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateRoomReq

// required int32 room_type = 1;
inline bool CreateRoomReq::has_room_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoomReq::set_has_room_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoomReq::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoomReq::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 CreateRoomReq::room_type() const {
  return room_type_;
}
inline void CreateRoomReq::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// required int32 member_cnt = 2;
inline bool CreateRoomReq::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoomReq::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoomReq::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoomReq::clear_member_cnt() {
  member_cnt_ = 0;
  clear_has_member_cnt();
}
inline ::google::protobuf::int32 CreateRoomReq::member_cnt() const {
  return member_cnt_;
}
inline void CreateRoomReq::set_member_cnt(::google::protobuf::int32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
}

// optional string opt2 = 3;
inline bool CreateRoomReq::has_opt2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoomReq::set_has_opt2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoomReq::clear_has_opt2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoomReq::clear_opt2() {
  if (opt2_ != &::google::protobuf::internal::kEmptyString) {
    opt2_->clear();
  }
  clear_has_opt2();
}
inline const ::std::string& CreateRoomReq::opt2() const {
  return *opt2_;
}
inline void CreateRoomReq::set_opt2(const ::std::string& value) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(value);
}
inline void CreateRoomReq::set_opt2(const char* value) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(value);
}
inline void CreateRoomReq::set_opt2(const char* value, size_t size) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoomReq::mutable_opt2() {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  return opt2_;
}
inline ::std::string* CreateRoomReq::release_opt2() {
  clear_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opt2_;
    opt2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoomReq::set_allocated_opt2(::std::string* opt2) {
  if (opt2_ != &::google::protobuf::internal::kEmptyString) {
    delete opt2_;
  }
  if (opt2) {
    set_has_opt2();
    opt2_ = opt2;
  } else {
    clear_has_opt2();
    opt2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateRoomRsp

// required int32 result = 1;
inline bool CreateRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CreateRoomRsp::result() const {
  return result_;
}
inline void CreateRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 room_id = 2;
inline bool CreateRoomRsp::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoomRsp::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoomRsp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoomRsp::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 CreateRoomRsp::room_id() const {
  return room_id_;
}
inline void CreateRoomRsp::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string fail_string = 3;
inline bool CreateRoomRsp::has_fail_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoomRsp::set_has_fail_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoomRsp::clear_has_fail_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoomRsp::clear_fail_string() {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    fail_string_->clear();
  }
  clear_has_fail_string();
}
inline const ::std::string& CreateRoomRsp::fail_string() const {
  return *fail_string_;
}
inline void CreateRoomRsp::set_fail_string(const ::std::string& value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void CreateRoomRsp::set_fail_string(const char* value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void CreateRoomRsp::set_fail_string(const char* value, size_t size) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoomRsp::mutable_fail_string() {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  return fail_string_;
}
inline ::std::string* CreateRoomRsp::release_fail_string() {
  clear_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fail_string_;
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoomRsp::set_allocated_fail_string(::std::string* fail_string) {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    delete fail_string_;
  }
  if (fail_string) {
    set_has_fail_string();
    fail_string_ = fail_string;
  } else {
    clear_has_fail_string();
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InRoomReq

// required int32 room_id = 1;
inline bool InRoomReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InRoomReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InRoomReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InRoomReq::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 InRoomReq::room_id() const {
  return room_id_;
}
inline void InRoomReq::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string opt1 = 2;
inline bool InRoomReq::has_opt1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InRoomReq::set_has_opt1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InRoomReq::clear_has_opt1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InRoomReq::clear_opt1() {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    opt1_->clear();
  }
  clear_has_opt1();
}
inline const ::std::string& InRoomReq::opt1() const {
  return *opt1_;
}
inline void InRoomReq::set_opt1(const ::std::string& value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void InRoomReq::set_opt1(const char* value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void InRoomReq::set_opt1(const char* value, size_t size) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InRoomReq::mutable_opt1() {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  return opt1_;
}
inline ::std::string* InRoomReq::release_opt1() {
  clear_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opt1_;
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InRoomReq::set_allocated_opt1(::std::string* opt1) {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    delete opt1_;
  }
  if (opt1) {
    set_has_opt1();
    opt1_ = opt1;
  } else {
    clear_has_opt1();
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InRoomRsp

// required int32 result = 1;
inline bool InRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 InRoomRsp::result() const {
  return result_;
}
inline void InRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 room_id = 2;
inline bool InRoomRsp::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InRoomRsp::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InRoomRsp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InRoomRsp::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 InRoomRsp::room_id() const {
  return room_id_;
}
inline void InRoomRsp::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string fail_string = 3;
inline bool InRoomRsp::has_fail_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InRoomRsp::set_has_fail_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InRoomRsp::clear_has_fail_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InRoomRsp::clear_fail_string() {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    fail_string_->clear();
  }
  clear_has_fail_string();
}
inline const ::std::string& InRoomRsp::fail_string() const {
  return *fail_string_;
}
inline void InRoomRsp::set_fail_string(const ::std::string& value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void InRoomRsp::set_fail_string(const char* value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void InRoomRsp::set_fail_string(const char* value, size_t size) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InRoomRsp::mutable_fail_string() {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  return fail_string_;
}
inline ::std::string* InRoomRsp::release_fail_string() {
  clear_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fail_string_;
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InRoomRsp::set_allocated_fail_string(::std::string* fail_string) {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    delete fail_string_;
  }
  if (fail_string) {
    set_has_fail_string();
    fail_string_ = fail_string;
  } else {
    clear_has_fail_string();
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OutRoomReq

// required int32 room_id = 1;
inline bool OutRoomReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutRoomReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutRoomReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutRoomReq::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 OutRoomReq::room_id() const {
  return room_id_;
}
inline void OutRoomReq::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string opt1 = 2;
inline bool OutRoomReq::has_opt1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutRoomReq::set_has_opt1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutRoomReq::clear_has_opt1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutRoomReq::clear_opt1() {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    opt1_->clear();
  }
  clear_has_opt1();
}
inline const ::std::string& OutRoomReq::opt1() const {
  return *opt1_;
}
inline void OutRoomReq::set_opt1(const ::std::string& value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void OutRoomReq::set_opt1(const char* value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void OutRoomReq::set_opt1(const char* value, size_t size) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OutRoomReq::mutable_opt1() {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  return opt1_;
}
inline ::std::string* OutRoomReq::release_opt1() {
  clear_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opt1_;
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OutRoomReq::set_allocated_opt1(::std::string* opt1) {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    delete opt1_;
  }
  if (opt1) {
    set_has_opt1();
    opt1_ = opt1;
  } else {
    clear_has_opt1();
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OutRoomRsp

// required int32 result = 1;
inline bool OutRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OutRoomRsp::result() const {
  return result_;
}
inline void OutRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 room_id = 2;
inline bool OutRoomRsp::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutRoomRsp::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutRoomRsp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutRoomRsp::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 OutRoomRsp::room_id() const {
  return room_id_;
}
inline void OutRoomRsp::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string fail_string = 3;
inline bool OutRoomRsp::has_fail_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutRoomRsp::set_has_fail_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutRoomRsp::clear_has_fail_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutRoomRsp::clear_fail_string() {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    fail_string_->clear();
  }
  clear_has_fail_string();
}
inline const ::std::string& OutRoomRsp::fail_string() const {
  return *fail_string_;
}
inline void OutRoomRsp::set_fail_string(const ::std::string& value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void OutRoomRsp::set_fail_string(const char* value) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(value);
}
inline void OutRoomRsp::set_fail_string(const char* value, size_t size) {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  fail_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OutRoomRsp::mutable_fail_string() {
  set_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    fail_string_ = new ::std::string;
  }
  return fail_string_;
}
inline ::std::string* OutRoomRsp::release_fail_string() {
  clear_has_fail_string();
  if (fail_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fail_string_;
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OutRoomRsp::set_allocated_fail_string(::std::string* fail_string) {
  if (fail_string_ != &::google::protobuf::internal::kEmptyString) {
    delete fail_string_;
  }
  if (fail_string) {
    set_has_fail_string();
    fail_string_ = fail_string;
  } else {
    clear_has_fail_string();
    fail_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoomInfo

// required int32 room_id = 1;
inline bool RoomInfo::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInfo::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInfo::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInfo::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 RoomInfo::room_id() const {
  return room_id_;
}
inline void RoomInfo::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string opt1 = 2;
inline bool RoomInfo::has_opt1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInfo::set_has_opt1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInfo::clear_has_opt1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInfo::clear_opt1() {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    opt1_->clear();
  }
  clear_has_opt1();
}
inline const ::std::string& RoomInfo::opt1() const {
  return *opt1_;
}
inline void RoomInfo::set_opt1(const ::std::string& value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void RoomInfo::set_opt1(const char* value) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(value);
}
inline void RoomInfo::set_opt1(const char* value, size_t size) {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  opt1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomInfo::mutable_opt1() {
  set_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    opt1_ = new ::std::string;
  }
  return opt1_;
}
inline ::std::string* RoomInfo::release_opt1() {
  clear_has_opt1();
  if (opt1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opt1_;
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoomInfo::set_allocated_opt1(::std::string* opt1) {
  if (opt1_ != &::google::protobuf::internal::kEmptyString) {
    delete opt1_;
  }
  if (opt1) {
    set_has_opt1();
    opt1_ = opt1;
  } else {
    clear_has_opt1();
    opt1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opt2 = 3;
inline bool RoomInfo::has_opt2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomInfo::set_has_opt2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomInfo::clear_has_opt2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomInfo::clear_opt2() {
  if (opt2_ != &::google::protobuf::internal::kEmptyString) {
    opt2_->clear();
  }
  clear_has_opt2();
}
inline const ::std::string& RoomInfo::opt2() const {
  return *opt2_;
}
inline void RoomInfo::set_opt2(const ::std::string& value) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(value);
}
inline void RoomInfo::set_opt2(const char* value) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(value);
}
inline void RoomInfo::set_opt2(const char* value, size_t size) {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  opt2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomInfo::mutable_opt2() {
  set_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    opt2_ = new ::std::string;
  }
  return opt2_;
}
inline ::std::string* RoomInfo::release_opt2() {
  clear_has_opt2();
  if (opt2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opt2_;
    opt2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoomInfo::set_allocated_opt2(::std::string* opt2) {
  if (opt2_ != &::google::protobuf::internal::kEmptyString) {
    delete opt2_;
  }
  if (opt2) {
    set_has_opt2();
    opt2_ = opt2;
  } else {
    clear_has_opt2();
    opt2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoomMsg_2eproto__INCLUDED
